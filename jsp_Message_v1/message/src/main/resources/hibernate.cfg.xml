<?xml version='1.0' encoding='utf-8'?>  
<persistence xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
    <persistence-unit name="test">
      <properties>
	  	<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver" /> <!--配置数据库的驱动程序，Hibernate在连接数据库时，需要用到数据库的驱动程序-->
	  	<property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/test" /> <!--设置数据库的连接url:jdbc:mysql://localhost/hibernate,其中localhost表示mysql服务器名称，此处为本机，hibernate是数据库名-->
	  	<property name="hibernate.connection.username" value="root" /> <!--连接数据库是用户名-->  
	  	<property name="hibernate.connection.password" value="admin888" /> <!--连接数据库是密码-->
	  	<property name="hibernate.connection.pool.size" value="20" /> <!--数据库连接池的大小-->
		<property name="hibernate.show_sql" value="true" /> <!--是否在后台显示Hibernate用到的SQL语句，开发时设置为true，便于差错，程序运行时可以在Eclipse的控制台显示Hibernate的执行Sql语句。项目部署后以设置为false，提高运行效率-->
	  	<property name="jdbc.fetch_size" value="50" /> <!--jdbc.fetch_size是指Hibernate每次从数据库中取出并放到JDBC的Statement中的记录条数。FetchSize设的越大，读数据库的次数越少，速度越快，Fetch Size越小，读数据库的次数越多，速度越慢-->
	  	<property name="jdbc.batch_size" value="50" /> <!--jdbc.batch_size是指Hibernate批量插入,删除和更新时每次操作的记录数。BatchSize越大，批量操作的向数据库发送Sql的次数越少，速度就越快，同样耗用内存就越大-->
	  	<property name="jdbc.use_scrollable_resultset" value="false" /> <!--jdbc.use_scrollable_resultset是否允许Hibernate用JDBC的可滚动的结果集。对分页的结果集。对分页时的设置非常有帮助-->  
	  	<property name="hibernate.connection.useUnicode" value="true" /> <!--connection.useUnicode连接数据库时是否使用Unicode编码-->
	  	<property name="hibernate.connection.characterEncoding" value="utf8" />  <!--connection.characterEncoding连接数据库时数据的传输字符集编码方式，最好设置为gbk，用gb2312有的字符不全-->  
	  	<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" /> <!--hibernate.dialect 只是Hibernate使用的数据库方言,就是要用Hibernate连接那种类型的数据库服务器。--> 
	  	<property name="hbm2ddl.auto" value="update" /> <!-- 是否自动创建数据库表  他主要有一下几个值： validate:当sessionFactory创建时，自动验证或者schema定义导入数据库.  create:每次启动都drop掉原来的schema，创建新的。 create-drop:当sessionFactory明确关闭时，drop掉schema. update(常用):如果没有schema就创建，有就更新。-->
	  	<property name="current_session_context_class" value="thread" /> <!-- 配置此处 sessionFactory.getCurrentSession()可以完成一系列的工作，当调用时， hibernate将session绑定到当前线程，事务结束后，hibernate将session从当前线程中释放，并且关闭session。当再次调用getCurrentSession()时，将得到一个新的session，并重新开始这一系列工作。-->  
	  	<property name="hibernate.id.new_generator_mappings" value="false" />
	  	
	  	<!--指定映射文件为“hibernate/ch1/UserInfo.hbm.xml”        
		<mapping class="cn.ptp.hibernate.Users" />-->
		
	  </properties>
	</persistence-unit>
</persistence>
